#include <iostream>
#include "ternary_search.h"

using namespace std;

template <class T>
class MyArray {
private:
   T* arr;
   int size;
public:
   MyArray(T* arr, int size) : arr(arr), size(size) {};
   T& operator[](int index);
   T& operator[](int index) const;
};

template <class T>
T& MyArray<T>::operator[](int index) {
   if (index >= size) {
      cout << "WARNING: index: " << index << " greater than " << size << endl;
   }
   cout << "accessing index: " << index << endl;
   return arr[index];
};

template <class T>
T& MyArray<T>::operator[](int index) const {
   if (index >= size) {
      cout << "WARNING: index: " << index << " greater than " << size << endl;
   }
   cout << "const accessing index: " << index << endl;
   return arr[index];
};

void test1() {
   int nums[] = {0, 10, 20, 30, 40, 50, 60, 70, 80, 90};
   for (int i = 0; i <= 90; i += 10) {
      if (ternary_search(nums, i, 0, 10) != i / 10) {
         std::cout
         << "Searching for " << i << " returned index "
         << ternary_search(nums, i, 0, 10) << " instead of "
         << i / 10 << "." << std::endl;
         return;
      }

      // search for something that doesn't exist.
      if (ternary_search(nums, i + 1, 0, 10) != -1) {
         std::cout
         << "Searching for " << i + 1 << " returned index "
         << ternary_search(nums, i + 1, 0, 10) << " instead of -1."
         << std::endl;
         return;
      }
   }
   std::cout << "On this small example, your search algorithm seems correct.\n";
}

int main() {
   int nums2[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
//   std::cout << ternary_search(nums2, 4, 0, 10) << std::endl;
   MyArray<int> arr(nums2, 10);

   cout << ternary_search(arr, 11, 0, 10) << endl;

   test1();

   int nums3[] = {47, 127, 145, 322, 374, 394, 403, 517, 541, 577, 582, 590, 607, 655, 671, 695, 706, 722, 726, 748, 830, 860, 870, 882, 967, 971, 1042, 1052, 1058, 1102, 1137, 1330, 1333, 1336, 1339, 1398, 1415, 1468, 1540, 1561, 1610, 1683, 1692, 1702, 1798, 1861, 1878, 1884, 1888, 1904, 1918, 1949, 1960, 1965, 1983, 1991, 1999, 2018, 2038, 2041, 2111, 2115, 2122, 2153, 2160, 2166, 2188, 2307, 2325, 2368, 2425, 2428, 2470, 2501, 2520, 2526, 2588, 2597, 2622, 2632, 2690, 2716, 2766, 2848, 2866, 2895, 2927, 2937, 2958, 3000, 3033, 3041, 3112, 3114, 3176, 3203, 3216, 3234, 3372, 3419, 3432, 3434, 3436, 3481, 3517, 3567, 3592, 3635, 3646, 3700, 3748, 3765, 3820, 3923, 3949, 3977, 3983, 4043, 4094, 4102, 4162, 4212, 4219, 4246, 4255, 4277, 4300, 4351, 4366, 4452, 4533, 4623, 4640, 4652, 4662, 4726, 4761, 4769, 4797, 4801, 4863, 4945, 5022, 5049, 5060, 5099, 5106, 5130, 5183, 5298, 5304, 5311, 5326, 5329, 5345, 5409, 5454, 5527, 5618, 5635, 5641, 5765, 5841, 5843, 5919, 5925, 6000, 6042, 6062, 6082, 6087, 6099, 6181, 6186, 6202, 6233, 6240, 6250, 6291, 6393, 6407, 6453, 6486, 6491, 6570, 6633, 6667, 6751, 6824, 6849, 6884, 6898, 6915, 6918, 6926, 6940, 6951, 6966, 7017, 7097, 7120, 7178, 7201, 7226, 7243, 7285, 7298, 7315, 7421, 7429, 7452, 7487, 7495, 7517, 7563, 7567, 7568, 7571, 7630, 7702, 7778, 7811, 7886, 7898, 7905, 7923, 7950, 7978, 7987, 8001, 8012, 8066, 8103, 8106, 8110, 8123, 8164, 8169, 8175, 8206, 8271, 8286, 8305, 8387, 8405, 8407, 8452, 8523, 8583, 8602, 8620, 8791, 8868, 8962, 9001, 9022, 9052, 9055, 9070, 9121, 9137, 9179, 9206, 9210, 9221, 9237, 9260, 9284, 9298, 9320, 9341, 9372, 9430, 9446, 9501, 9525, 9532, 9533, 9628, 9635, 9671, 9708, 9818, 9909, 9926, 9927, 9963, 10004, 10030, 10048, 10072, 10085, 10088, 10118, 10151, 10185, 10251, 10331, 10401, 10404, 10446, 10455, 10607, 10608, 10651, 10657, 10676, 10684, 10713, 10715, 10716, 10741, 10760, 10814, 10838, 10872, 10909, 10953, 10982, 10989, 11069, 11092, 11157, 11201, 11234, 11279, 11338, 11382, 11391, 11418, 11430, 11461, 11490, 11513, 11538, 11547, 11622, 11639, 11655, 11707, 11770, 11842, 11856, 11871, 11949, 12051, 12055, 12100, 12110, 12126, 12141, 12179, 12223, 12246, 12302, 12307, 12398, 12409, 12436, 12450, 12453, 12563, 12565, 12567, 12608, 12609, 12620, 12637, 12662, 12680, 12714, 12729, 12737, 12758, 12779, 12804, 12823, 12893, 12947, 13006, 13011, 13035, 13072, 13154, 13160, 13162, 13194, 13228, 13317, 13330, 13346, 13380, 13402, 13406, 13512, 13555, 13601, 13614, 13651, 13728, 13763, 13781, 13783, 13787, 13822, 13831, 13872, 13909, 13931, 13966, 13970, 13998, 14036, 14113, 14122, 14133, 14148, 14154, 14187, 14289, 14296, 14396, 14540, 14668, 14684, 14688, 14703, 14721, 14754, 14764, 14825, 14835, 14883, 14892, 14915, 14923, 14995, 15158, 15172, 15299, 15370, 15378, 15392, 15462, 15526, 15536, 15538, 15540, 15596, 15603, 15642, 15676, 15677, 15719, 15779, 15790, 15832, 15855, 15984, 16017, 16021, 16087, 16098, 16106, 16117, 16139, 16150, 16158, 16225, 16322, 16351, 16403, 16415, 16419, 16437, 16446, 16447, 16452, 16487, 16492, 16555, 16621, 16631, 16715, 16755, 16764, 16772, 16778, 16809, 16815, 16841, 16897, 16951, 16972, 16991, 17033, 17047, 17052, 17064, 17136, 17140, 17154, 17185, 17256, 17291, 17298, 17319, 17333, 17399, 17434, 17447, 17456, 17461, 17467, 17495, 17511, 17563, 17659, 17670, 17692, 17752, 17802, 17817, 17915, 17946, 17996, 18010, 18095, 18098, 18111, 18201, 18240, 18277, 18281, 18313, 18326, 18353, 18388, 18398, 18469, 18480, 18493, 18528, 18546, 18612, 18625, 18663, 18687, 18744, 18782, 18817, 18828, 18832, 18874, 18918, 18946, 18956, 18989, 19120, 19123, 19154, 19168, 19196, 19198, 19242, 19251, 19278, 19280, 19291, 19309, 19337, 19377, 19446, 19473, 19525, 19540, 19566, 19575, 19580, 19674, 19676, 19789, 19799, 19826, 19864, 19877, 19882, 19950, 20103, 20107, 20172, 20199, 20224, 20261, 20290, 20323, 20376, 20387, 20428, 20452, 20466, 20467, 20468, 20520, 20650, 20668, 20686, 20689, 20696, 20703, 20727, 20728, 20746, 20905, 20921, 20941, 20947, 20976, 20986, 20993, 21003, 21039, 21050, 21055, 21101, 21103, 21126, 21167, 21178, 21182, 21187, 21215, 21216, 21285, 21298, 21314, 21355, 21378, 21399, 21409, 21428, 21430, 21436, 21447, 21512, 21526, 21547, 21656, 21725, 21779, 21786, 21817, 21826, 21847, 21854, 21926, 22013, 22016, 22029, 22037, 22050, 22065, 22074, 22075, 22138, 22148, 22156, 22171, 22294, 22312, 22333, 22344, 22345, 22370, 22466, 22472, 22537, 22547, 22553, 22593, 22594, 22600, 22617, 22643, 22661, 22685, 22718, 22754, 22759, 22815, 23036, 23066, 23109, 23171, 23207, 23259, 23289, 23335, 23357, 23383, 23436, 23444, 23477, 23541, 23568, 23586, 23620, 23650, 23689, 23705, 23728, 23729, 23805, 23871, 23873, 23877, 23898, 24008, 24024, 24039, 24049, 24054, 24065, 24076, 24097, 24202, 24242, 24252, 24369, 24371, 24396, 24488, 24502, 24611, 24616, 24727, 24728, 24735, 24745, 24780, 24797, 24824, 24849, 24881, 24895, 24949, 24994, 24995, 25037, 25071, 25081, 25104, 25113, 25140, 25196, 25208, 25228, 25284, 25299, 25353, 25407, 25443, 25462, 25470, 25473, 25492, 25558, 25578, 25610, 25619, 25623, 25628, 25661, 25697, 25701, 25718, 25735, 25755, 25802, 25812, 25831, 25860, 25892, 25941, 25943, 25958, 25981, 26009, 26013, 26021, 26025, 26031, 26063, 26089, 26101, 26193, 26194, 26199, 26235, 26240, 26282, 26379, 26388, 26405, 26543, 26560, 26586, 26591, 26598, 26718, 26787, 26813, 26839, 26928, 26971, 26994, 26998, 27048, 27074, 27135, 27185, 27207, 27259, 27389, 27398, 27465, 27477, 27547, 27570, 27641, 27643, 27654, 27673, 27678, 27685, 27735, 27740, 27784, 27823, 27910, 28029, 28164, 28167, 28178, 28210, 28228, 28288, 28402, 28473, 28475, 28545, 28564, 28588, 28631, 28634, 28650, 28691, 28713, 28727, 28728, 28732, 28804, 28871, 28876, 28878, 28928, 28930, 28932, 29018, 29052, 29053, 29067, 29105, 29113, 29154, 29191, 29225, 29270, 29284, 29361, 29372, 29393, 29402, 29432, 29443, 29445, 29466, 29486, 29513, 29611, 29625, 29659, 29667, 29679, 29747, 29762, 29782, 29828, 29862, 29875, 29940, 29963, 29978, 29994, 30000, 30013, 30081, 30105, 30112, 30123, 30127, 30155, 30165, 30227, 30232, 30249, 30273, 30287, 30312, 30357, 30381, 30417, 30450, 30526, 30529, 30622, 30676, 30683, 30705, 30724, 30754, 30756, 30984, 31014, 31052, 31060, 31108, 31114, 31125, 31143, 31186, 31219, 31244, 31289, 31393, 31414, 31441, 31468, 31520, 31569, 31674, 31711, 31721, 31722, 31749, 31765, 31794, 31810, 31828, 31840, 31844, 31863, 31920, 31974, 31976, 32008, 32027, 32116, 32171, 32182, 32185, 32287, 32320, 32344, 32359, 32392, 32473, 32487, 32508, 32531, 32535, 32585, 32595, 32624, 32725, 32755};

   MyArray<int> arr2(nums3, 986);
   cout << ternary_search(arr2, 723, 0, 986) << endl;

   return 0;
}